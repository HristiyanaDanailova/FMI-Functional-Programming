(#%require racket/port)
; отваря се порт , който чете от дадения файл
(define in (open-input-file "input.txt"))

; сравнява даден char с #\return
(define (char-return? ch)
  (char=? #\return ch))


; функция, която разделя стринг на лист от стрингове според подаден delimiter
;https://cookbook.scheme.org/split-string/
(define (string-split char-delimiter? string)
  (define (maybe-add a b parts)
    (if (= a b) parts (cons (substring string a b) parts)))
  (let ((n (string-length string)))
    (let loop ((a 0) (b 0) (parts '()))
      (if (< b n)
          (if (not (char-delimiter? (string-ref string b)))
              (loop a (+ b 1) parts)
              (loop (+ b 1) (+ b 1) (maybe-add a b parts)))
          (reverse (maybe-add a b parts))))))


(define (foldr op nv l)
  (if (null? l) nv
      (op (car l) (foldr op nv (cdr l)))))

;функция, която разделя лист на подлистове според подаден delimiter
;https://codereview.stackexchange.com/questions/87058/splitting-a-list-in-racket
(define (split-by lst x)
  (foldr (lambda (element next)
           (if (string=? element x)
               (cons '() next)
               (cons (cons element (car next)) (cdr next))))
         (list '()) lst))

; създава двойки елементи 
(define (make-pairs l)
  (if (null? l)
     '()
     (append (list (cons (car l) (if (null? (car (cdr l)))
                             '()
                             (car (cdr l))))) (make-pairs (cdr (cdr l))))))

;оценява всеки рунд
(define (score-round r)
  (cond ((string=? "X" (cdr r)) (+ 1 (if (string=? "A" (car r))
                                       3
                                       (if (string=? "B" (car r))
                                           0
                                           6))))
        ((string=? "Y" (cdr r)) (+ 2 (if (string=? "A" (car r))
                                       6
                                       (if (string=? "B" (car r))
                                           3
                                           0))))
        (else ( + 3 (if (string=? "A" (car r))
                                       0
                                       (if (string=? "B" (car r))
                                           6
                                           3))))))

;към всеки ред от кода е показан пример и резултат от изпълнението
(define s (string-split char-whitespace? (port->string in)))
;-> ("A" "Y" "B" "X" "B" "X" "C" "Y" "B" "X" "A" "Z" "B" "X" "B" "X" "C" "Z")
(define pairs (make-pairs s))
;-> (("A" . "Y") ("B" . "X") ("B" . "X") ("C" . "Y") ("B" . "X") ("A" . "Z") ("B" . "X") ("B" . "X") ("C" . "Z"))
(define scores (map score-round (make-pairs s)))
;-> (8 1 1 2 1 3 1 1 6)
(foldr + 0 scores)
(close-input-port in)